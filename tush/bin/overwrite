#!/bin/sh

# overwrite - Copy standard input to output only after EOF.
#

# Lets you input a file to a pipeline, change it, and pipe output back
# to the same file. Based on 'overwrite', from 'The UNIX Programming 
# Environment' - Kernighan & Pike.
#
# Author: Clyde Ingram Date: 17-Dec-96 Usage: overWrite file cmd [args]
#
# Like the nice and nohup commands, overwrite takes another command as 
# its arguments. This keeps the data generating program under the control
# of overwrite, so that it can check the exit status before committing the
# file replacement.

opath=$PATH
PATH=/bin:/usr/bin

# Validate command:
# Must specify at least a file and a command. Additional parameters
# are arguments to the command.

case $# in 
  0|1) echo "Usage: `basename $0` file cmd [args]" 1>&2; exit 2
esac

file=$1; shift
new=/tmp/overwr1.$$
old=/tmp/overwr2.$$

# Using the previous PATH variable, run the specified command with 
# arguments.
# Save output to a temporary file. If successful, overwrite the file.

trap 'rm -f $new $old; exit 1' 1 2 15 # Clean up files

if PATH=$opath "$@" >$new    # Collect input
then 
     cp $file $old           # Save original file
     trap '' 1 2 15          # We are committed; ignore signals
     cp $new $file
else 
     echo "`basename $0`: $1 failed, $file unchanged" 1>&2
     exit 1
fi

rm -f $new $old